name: Release

on:
  release:
      types: [published]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
  CONFIGURATION: 'Release'
  VERBOSITY:  'Normal'
  
jobs:
  Release:
    name: Release Build TinyCLR 
    runs-on: [windows-latest]
    strategy:
      matrix:
        vs-version: [16.6]

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    
    - name: Extract build information into variables
      id: info
      run: |
        echo "##[set-output name=version;]$(echo $env:GITHUB_REF.Replace('refs/tags/v',''))"
        echo "##[set-output name=build;]$(echo $(git rev-list --count HEAD))"
        echo "##[set-output name=copyright;]$(echo Â© $(date -u +%Y) Bytewizer.  All rights reserved.)" 
    
    - name: Show build information
      run: |
        echo build=${{ steps.info.outputs.build }}
        echo copyright=${{ steps.info.outputs.copyright }}

    - name: Show release event information
      run: |
        echo "release.name        = ${{ github.event.release.name }}"
        echo "release.body        = ${{ github.event.release.body }}"
        echo "release.upload_url  = ${{ github.event.release.upload_url }}"
        echo "release.html_url    = ${{ github.event.release.html_url }}"
        echo "release.tag_name    = ${{ github.event.release.tag_name }}"
        echo "release.draft       = ${{ github.event.release.draft }}"
        echo "release.prerelease  = ${{ github.event.release.prerelease }}"
    
    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1.0.0
      with:
        vs-version: ${{ matrix.vs-version }}       
    
    - name: Restore project
      working-directory: src
      run: >- 
        msbuild -t:restore -verbosity:${env:VERBOSITY} 

    - name: Release Build and pack libraries
      working-directory: src
      run: >- 
        msbuild -t:pack -verbosity:${env:VERBOSITY} 
        -p:PackageOutputPath=\builds\artifacts
        -p:BuildNumber="${{ steps.info.outputs.build }}" 
        -p:Copyright="${{ steps.info.outputs.copyright }}"
        -p:PackageVersion="${{ steps.info.outputs.version }}"
        -p:Configuration=${env:CONFIGURATION}
        -p:RepositoryUrl="https://github.com/microcompiler/microserver"
        -p:PackageTags="tcp-server udp-server socket-server http-server http https tinyclr tinyclros sitcore iot"
        -p:IncludeSymbols=true 
        -p:SymbolPackageFormat="snupkg"
        -p:PublishRepositoryUrl=true
        -p:EmbedUntrackedSources=true
   
    - name: Upload release artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Release Package
        path: /builds/artifacts
    
    - name: Create release asset
      run: Compress-Archive -DestinationPath /builds/packages.zip -Path /builds/artifacts/*.*nupkg
      
    - name: Upload release asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /builds/packages.zip
        asset_name: Packages.zip
        asset_content_type: application/zip
    
    - name: Setup nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-api-key: ${{ secrets.NUGET_API_KEY }}
        nuget-version: 'latest' 

#    - name: Publish package to github
#      run: |
#      nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/microcompiler/index.json" -UserName microcompiler -Password ${{secrets.GITHUB_TOKEN}}
#      nuget push artifacts/*.nupkg -Source "GitHub"

#    - name: Publish package to nuget
#      run: |
#        nuget sources Add -Name "NuGet" -Source "https://int.nugettest.org"
#        nuget push artifacts/*.*nupkg -Source "NuGet"
