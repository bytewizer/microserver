<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bytewizer.TinyCLR.Logging.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Bytewizer.TinyCLR.Logging.EventId">
            <summary>
            Identifies a logging event. The primary identifier is the "Id" property, with the "Name" property providing a short description of this type of event.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.op_Implicit(System.Int32)~Bytewizer.TinyCLR.Logging.EventId">
            <summary>
            Implicitly creates an EventId from the given <see cref="T:System.Int32"/>.
            </summary>
            <param name="i">The <see cref="T:System.Int32"/> to convert to an EventId.</param>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.op_Equality(Bytewizer.TinyCLR.Logging.EventId,Bytewizer.TinyCLR.Logging.EventId)">
            <summary>
            Checks if two specified <see cref="T:Bytewizer.TinyCLR.Logging.EventId"/> instances have the same value. They are equal if they have the same Id.
            </summary>
            <param name="left">The first <see cref="T:Bytewizer.TinyCLR.Logging.EventId"/>.</param>
            <param name="right">The second <see cref="T:Bytewizer.TinyCLR.Logging.EventId"/>.</param>
            <returns><code>true</code> if the objects are equal.</returns>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.op_Inequality(Bytewizer.TinyCLR.Logging.EventId,Bytewizer.TinyCLR.Logging.EventId)">
            <summary>
            Checks if two specified <see cref="T:Bytewizer.TinyCLR.Logging.EventId"/> instances have different values.
            </summary>
            <param name="left">The first <see cref="T:Bytewizer.TinyCLR.Logging.EventId"/>.</param>
            <param name="right">The second <see cref="T:Bytewizer.TinyCLR.Logging.EventId"/>.</param>
            <returns><code>true</code> if the objects are not equal.</returns>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.#ctor(System.Int32,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Bytewizer.TinyCLR.Logging.EventId"/> struct.
            </summary>
            <param name="id">The numeric identifier for this event.</param>
            <param name="name">The name of this event.</param>
        </member>
        <member name="P:Bytewizer.TinyCLR.Logging.EventId.Id">
            <summary>
            Gets the numeric identifier for this event.
            </summary>
        </member>
        <member name="P:Bytewizer.TinyCLR.Logging.EventId.Name">
            <summary>
            Gets the name of this event.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.ToString">
            <inheritdoc />
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.Equals(Bytewizer.TinyCLR.Logging.EventId)">
            <summary>
            Indicates whether the current object is equal to another object of the same type. Two events are equal if they have the same id.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><code>true</code> if the current object is equal to the other parameter; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.EventId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.ILogger">
            <summary>
            Represents a type used to perform logging.
            </summary>
            <remarks>Aggregates most logging patterns to a single method.</remarks>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.ILogger.Log(Bytewizer.TinyCLR.Logging.LogLevel,Bytewizer.TinyCLR.Logging.EventId,System.Object,System.Exception)">
            <summary>
            Writes a log entry.
            </summary>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.ILogger.IsEnabled(Bytewizer.TinyCLR.Logging.LogLevel)">
            <summary>
            Checks if the given <paramref name="logLevel"/> is enabled.
            </summary>
            <param name="logLevel">Level to be checked.</param>
            <returns><c>true</c> if enabled.</returns>
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.ILoggerFactory">
            <summary>
            Represents a type used to configure the logging system and create instances of <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> from
            the registered <see cref="T:Bytewizer.TinyCLR.Logging.ILoggerProvider"/>s.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.ILoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns>The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/>.</returns>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.ILoggerFactory.AddProvider(Bytewizer.TinyCLR.Logging.ILoggerProvider)">
            <summary>
            Adds an <see cref="T:Bytewizer.TinyCLR.Logging.ILoggerProvider"/> to the logging system.
            </summary>
            <param name="provider">The <see cref="T:Bytewizer.TinyCLR.Logging.ILoggerProvider"/>.</param>
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.ILoggerProvider">
            <summary>
            Represents a type that can create instances of <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.ILoggerProvider.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> instance.
            </summary>
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.LoggerExtensions">
            <summary>
            ILogger extension methods for common scenarios.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogDebug(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogDebug(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogDebug(Bytewizer.TinyCLR.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogDebug(Bytewizer.TinyCLR.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogTrace(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogTrace(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogTrace(Bytewizer.TinyCLR.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogTrace(Bytewizer.TinyCLR.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogInformation(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogInformation(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogInformation(Bytewizer.TinyCLR.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogInformation(Bytewizer.TinyCLR.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogWarning(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogWarning(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogWarning(Bytewizer.TinyCLR.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogWarning(Bytewizer.TinyCLR.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogError(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogError(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogError(Bytewizer.TinyCLR.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogError(Bytewizer.TinyCLR.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogCritical(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogCritical(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogCritical(Bytewizer.TinyCLR.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.LogCritical(Bytewizer.TinyCLR.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.Log(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.Log(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.LogLevel,Bytewizer.TinyCLR.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.Log(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerExtensions.Log(Bytewizer.TinyCLR.Logging.ILogger,Bytewizer.TinyCLR.Logging.LogLevel,Bytewizer.TinyCLR.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.LoggerFactoryExtensions">
            <summary>
            ILoggerFactory extension methods for common scenarios.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.LoggerFactoryExtensions.CreateLogger(Bytewizer.TinyCLR.Logging.ILoggerFactory,System.Type)">
            <summary>
            Creates a new <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> instance using the full name of the given <paramref name="type"/>.
            </summary>
            <param name="factory">The factory.</param>
            <param name="type">The type.</param>
            <return>The <see cref="T:Bytewizer.TinyCLR.Logging.ILogger"/> that was created.</return>
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.LogLevel">
            <summary>
            Defines logging severity levels.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.LogLevel.Trace">
            <summary>
            Logs that contain the most detailed messages. These messages may contain sensitive application data.
            These messages are disabled by default and should never be enabled in a production environment.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.LogLevel.Debug">
            <summary>
            Logs that are used for interactive investigation during development.  These logs should primarily contain
            information useful for debugging and have no long-term value.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.LogLevel.Information">
            <summary>
            Logs that track the general flow of the application. These logs should have long-term value.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.LogLevel.Warning">
            <summary>
            Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the
            application execution to stop.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.LogLevel.Error">
            <summary>
            Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a
            failure in the current activity, not an application-wide failure.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.LogLevel.Critical">
            <summary>
            Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires
            immediate attention.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.LogLevel.None">
            <summary>
            Not used for writing log messages. Specifies that a logging category should not write any messages.
            </summary>
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.NullLogger">
            <summary>
            Minimalistic logger that does nothing.
            </summary>
        </member>
        <member name="P:Bytewizer.TinyCLR.Logging.NullLogger.Instance">
            <summary>
            Returns the shared instance of <see cref="T:Bytewizer.TinyCLR.Logging.NullLogger"/>.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.NullLogger.IsEnabled(Bytewizer.TinyCLR.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.NullLogger.Log(Bytewizer.TinyCLR.Logging.LogLevel,Bytewizer.TinyCLR.Logging.EventId,System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Bytewizer.TinyCLR.Logging.NullLoggerFactory">
            <summary>
            An <see cref="T:Bytewizer.TinyCLR.Logging.ILoggerFactory"/> used to create instance of
            <see cref="T:Bytewizer.TinyCLR.Logging.NullLogger"/> that logs nothing.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.NullLoggerFactory.#ctor">
            <summary>
            Creates a new <see cref="T:Bytewizer.TinyCLR.Logging.NullLoggerFactory"/> instance.
            </summary>
        </member>
        <member name="F:Bytewizer.TinyCLR.Logging.NullLoggerFactory.Instance">
            <summary>
            Returns the shared instance of <see cref="T:Bytewizer.TinyCLR.Logging.NullLoggerFactory"/>.
            </summary>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.NullLoggerFactory.CreateLogger(System.String)">
            <inheritdoc />
            <remarks>
            This returns a <see cref="T:Bytewizer.TinyCLR.Logging.NullLogger"/> instance which logs nothing.
            </remarks>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.NullLoggerFactory.AddProvider(Bytewizer.TinyCLR.Logging.ILoggerProvider)">
            <inheritdoc />
            <remarks>
            This method ignores the parameter and does nothing.
            </remarks>
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.NullLoggerFactory.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Bytewizer.TinyCLR.Logging.TypeNameHelper.GetTypeDisplayName(System.Type,System.Boolean)">
            <summary>
            Pretty print a type name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="fullName"><c>true</c> to print a fully qualified name.</param>
        </member>
    </members>
</doc>
